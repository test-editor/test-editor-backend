buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.xtext:xtext-gradle-plugin:1.0.20'
        classpath 'org.owasp:dependency-check-gradle:3.1.0'
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'com.jfrog.bintray' version '1.8.0'
}

subprojects {
    repositories {
        jcenter()
        maven {
            url  "http://dl.bintray.com/franzbecker/maven" 
        }
        maven {
            url 'https://repo.gradle.org/gradle/libs-releases'
        }
        maven {
            url  "http://dl.bintray.com/test-editor/maven" 
        }
    }
    
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'java'
    apply plugin: 'org.xtext.xtend'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'application'

    group = 'org.testeditor.web'

    ext.configPath = "./"
    if (project.hasProperty('localconfig')) {
        ext.configFile = 'config.local.yml'
    } else {
        ext.configFile = 'config.yml'
    }
    
    ext.versions = new HashMap<String,String>()
    
    setVersionDefaults(ext, [
        dropwizard: '1.2.2',
        testEditorDropwizard: '0.14.0',
        xtext: '2.13.0',
        testEditorLanguage: '1.15.0'
    ])

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    
    apply from: "$rootDir/gradle/publishing.gradle"

    dependencyCheck {
        autoUpdate=true
        cveValidForHours=1
        format='ALL'
        data {
            directory='./.odcdb'
        }
    }

    sourceSets {
          main.xtendOutputDir = 'src/main/xtend-gen'
          test.xtendOutputDir = 'src/test/xtend-gen'
    }

    dependencies {
        compile "org.eclipse.xtend:org.eclipse.xtend.lib:$versions.xtext"
        compile "org.testeditor.web:org.testeditor.web.dropwizard:$versions.testEditorDropwizard"
        compile 'commons-io:commons-io:2.6'
        testCompile "org.testeditor.web:org.testeditor.web.dropwizard.testing:$versions.testEditorDropwizard"
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.13.0'
        testCompile 'de.xtendutils:junit:0.0.4'
        testCompile "io.dropwizard:dropwizard-testing:$versions.dropwizard"
    }
   
    test {
        testLogging.showStandardStreams = true
    }

    afterEvaluate {
        println "Configuration for ($project.name):"
        println "  dependencies: $versions"
        println "  dropwizard configuration file: $configFile"
    }

}

/*
 * Configure release plugin.
 * Remove tasks "updateVersion" and "commitNewVersion" as we don't want the new SNAPSHOT
 * version commit on the master branch.
 */
tasks.release.tasks -= [":updateVersion", ":commitNewVersion"]
release {
    preTagCommitMessage = '[release]'
    tagCommitMessage = '[release]'
    newVersionCommitMessage = '[release] new version'
    tagTemplate = 'v${version}'
}

afterReleaseBuild.dependsOn bintrayUpload

task build {
    dependsOn = subprojects.collect{it.tasks['build']}
}

task docker {
    dependsOn = subprojects.collect{"${it.name}:docker"}
}

def setVersionDefaults(ext, props) {
    props.each{ k,v -> setVersionDefault(ext, k, v) }
}

def setVersionDefault(ext, artifactName, defaultVersion) {
    if (!project.hasProperty('versions') || !project['versions'][artifactName] || project['versions'][artifactName] == null) {
        ext['versions'][artifactName] = defaultVersion
    } else {
        ext['versions'][artifactName] = project['versions'][artifactName]
    }
}
