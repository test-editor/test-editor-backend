dependencies {
    compile 'org.eclipse.jgit:org.eclipse.jgit:5.1.2.201810061102-r'
    testCompile 'org.eclipse.jgit:org.eclipse.jgit.junit:5.1.2.201810061102-r'
}

mainClassName = 'org.testeditor.web.backend.persistence.PersistenceApplication'

run {
    main mainClassName
    args 'server', configPath + configFile
}

tasks.withType(JavaExec) {
    if (System.getProperty('run.debug')) {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}

dependencyCheck {
    failBuildOnCVSS=11
    suppressionFile=file("suppressions.xml").getCanonicalPath()
}

task docker(type:Exec) {
    dependsOn(assemble)
    executable 'sh'
    args '-c', """
      (([ -d testeditor ] && rm -Rf testeditor) || true) &&
      cd build/distributions && (rm persistence.tar || true) &&
      rm org.testeditor.*.zip &&
      mv org.testeditor.web.backend.persistence-*.tar persistence.tar &&
      tar -xf persistence.tar &&
      mv org.testeditor.web.backend.persistence* ../../testeditor &&
      cd ../.. &&
      docker build -t testeditor/persistence:snapshot .
    """
}

task logDependencies {
    outputs.upToDateWhen { false }
    doLast {
        new File("${project.getBuildDir()}/resources/main").mkdirs()
        ext.persistenceDependencyFile = new File("${project.getBuildDir()}/resources/main/${project.name}.dependencies.txt")
        persistenceDependencyFile.text = "# ${project.name} dependencies: ${new Date().format('yyyyMMddHHmmss')} \n"
        persistenceDependencyFile.text += "${project.group}:${project.name}:${project.version}\n"
        configurations.compile.incoming.getResolutionResult().getAllDependencies().each {
            persistenceDependencyFile.text += it.getSelected().toString() + "\n"
        }
    }
}

jar.dependsOn(logDependencies)
test.dependsOn(logDependencies)
